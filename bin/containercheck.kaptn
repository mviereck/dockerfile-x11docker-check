#! /usr/bin/kaptain
start "x11docker feature and container isolation check"  -> tabs buttonline ;

  tabs:tabbed -> xserver gpu container features;
        
    xserver:framed "X server security check" -> xserver_info mouse keyboard windows clipboard;
      xserver_info        -> @text=" Some checks for X security leaks. \n Most of interest for x11docker option --hostdisplay, especially along with --clipboard or --gpu. \n The common X + Docker setup with '-v /tmp/.X11-unix:/tmp/.X11-unix --env DISPLAY' is affected, too." ;
      mouse "Mouse events" -> mouse_info xeyes;
        mouse_info        -> @text=" If isolation works, the eyes should follow the mouse only while it moves on container windows.";
        xeyes             -> @fork("jumpxeyes")="Watch mouse movement with xeyes";
      keyboard "Keyboard events and remote host control" -> keyboard_info xinput xdotool;
        keyboard_info " Keylogging and remote host control is the most dangerous part in running container applications on X." -> "" ;
        xinput            -> @fork("xterm -hold -e 'keylogger'")="Run keylogger with xinput";
        xdotool           -> @fork("xterm -hold -e formatc")="Try to run a terminal on host with xdotool";
      windows "Application windows" -> xwininfo xev;
        xwininfo          -> @fork("showoutput windowlist")="Show a list of accessible application windows with xwininfo";
        xev               -> @fork("xterm -hold -e windowevents")="Watch window events with xev";
      clipboard "Clipboard" -> xclip;
        xclip             -> @fork("showoutput clipboard")="Show content of clipboard with xclip";

    gpu:framed " GPU video memory leak" -> windows_info palinopsia glx @fill;
      windows_info        -> @text="Note: On MS Windows along with option --gpu these checks can cause the X server to freeze, especially with NVIDIA.";
      palinopsia "Palinopsia leak" -> palinopsia_info palinopsia_button;
        palinopsia_info   -> @text=" GPU drivers do not clean the video memory when an application allocates it. \n This affects x11docker option --gpu. \n Former sensitive video content like letters or 'pron' can be viewed and even survives a reboot. \n This is a privacy leak. \n Compare:  https://hsmr.cc/palinopsia \n Error messages or all black window content across scrolled view indicate that the video memory is not leaked.";
        palinopsia_button -> @fork("xterm -hold -e 'palinopsia 800 600 256'")="View some GPU video memory (palinopsia leak). Scroll with arrow keys.";
      glx "Hardware acceleration checks" -> glx_info glxgears glxspheres glxinfo;
        glx_info          -> @text="Check whether hardware acceleration works. \n glxgears and glxspheres should show a frame rate matching your monitor, mostly about 60 frames/second. \n glxinfo should show your video card name. If the renderer string contains 'llvmpipe', software rendering is used." ;
        glxgears          -> @fork("xterm -hold -e 'glxgears -info | grep -v EXTENSIONS'")="Run glxgears";
        glxspheres        -> @fork("xterm -hold -e glxspheres64")="Run glxspheres";
        glxinfo           -> @fork("showoutput gpu_glxinfo")="Show glxinfo excerpt";
      
    container:framed "Container capabilities" -> capabilities network ipc processes;
      capabilities "Capabilities" -> capabilities_info capsh; 
        capabilities_info " Capabilities allow access to system resources for root user and suid applications. \n Regular user application should need none of them. \n Docker has a default set of allowed capabilties. x11docker drops them all in default setups. \n Your host is at risk if capabilities other than docker default are available." -> "";
        capsh             -> @fork("showoutput capcheck")="Check process capabilities";
      network "Network" -> network_info netstat iptraf;
        network_info      -> @text=" Network namespacing is a quite important part of container isolation. \n If you run with docker run option --network=host or x11docker option --hostnet, \n applications in container can access e.g. DBus on host and communicate with host applications, \n and can spy on and manipulate host network in general.";
        netstat           -> @fork("showoutput 'networkinfo'")="Show some network information with netstat";
        iptraf            -> @fork("xterm -hold -e networktraffic")="Show network traffic with iptraf";
      ipc "IPC Shared memory" -> ipc_info lsipc;
        ipc_info          -> @text=" Shared memory allows some interprocess communication and data exchange. \n x11docker option --hostipc disables IPC namespacing (docker run option --ipc=host). \n IPC namespacing is disabled if using --hostdisplay along with --gpu or --clipboard.";
        lsipc             -> @fork("showoutput showipc")="Show output of lsipc";
      processes "Processes" -> pstree_info pstree;
        pstree_info       -> @text=" The process tree should show container applications only.";
        pstree            -> @fork("showoutput pstree -p")="Show process tree with pstree";
        
    features:framed "Hardware" -> hardware sound webcam printer @fill;
      hardware "Hardware information" -> windows_info2 hardinfo;
        windows_info2     -> @text="Note: On MS Windows along with option --gpu this check can cause the X server to freeze, especially with NVIDIA.";
        hardinfo          -> @fork("hardinfo")="Hardware information with hardinfo";
      sound "Sound" -> sound_info soundalsa soundpulse;
        sound_info        -> @text=" Sound check for options --alsa and --pulsaudio";
        soundalsa         -> @fork("xterm -hold -e soundcheck-alsa")="Sound check ALSA";
        soundpulse        -> @fork("xterm -hold -e soundcheck-pulse")="Sound check Pulseaudio";
      webcam "Webcam" -> webcam_info webcam_capture;
        webcam_info       -> @text=" Webcam capture with option --webcam";
        webcam_capture    -> @fork("xterm -hold -e webcamcapture")="Webcam capture";
      printer "Printer" -> lpstat;
        lpstat            -> @fork("showoutput printerlist")="Show a list of printers provided by CUPS";
        
        
    buttonline:beside -> bash @close="Exit";
      bash              -> @fork("xfce4-terminal")="Run a bash terminal";
