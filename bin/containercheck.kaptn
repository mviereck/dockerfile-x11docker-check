#! /usr/bin/kaptain
start "x11docker container security and feature check"  -> tabs buttonline ;

  tabs:tabbed -> xserver gpu features container;
        
    xserver:framed "X server security check" -> xserver_info mouse keyboard windows;
      xserver_info        -> @text=" Some checks for X security leaks. \n Most of interest for x11docker option --hostdisplay along with --clipboard or --gpu. \n The common X + Docker setup with '-v /tmp/.X11-unix:/tmp/.X11-unix --env DISPLAY' is affected, too." ;

      mouse "Mouse events" -> mouse_info mouse_buttons;
        mouse_info        -> @text=" Mouse movements and window mouse events are visible only within the parent X server. \n With option --hostdisplay all movements and events are visible.";
        mouse_buttons:beside -> xeyes xev;
          xeyes           -> @fork("xeyes")="Watch mouse movement with xeyes";
          xev             -> @fork("xterm -hold -e 'xev -root'")="Watch window events with xev";
      
      keyboard "Keyboard events and remote host control" -> keyboard_info keyboard_buttons;
        keyboard_info " Keylogging and remote host control is the most dangerous part in running container applications on X. \n x11docker option --hostdisplay along with --gpu or --clipboard allows it." -> "" ;
        keyboard_buttons:beside -> xinput xkbwatch xdotool;
          xinput          -> @fork("xterm -hold -e 'keylogger'")="Run keylogger with xinput";
          xkbwatch        -> @fork("xkbwatch")="Show state of switch keys with xkbwatch";
          xdotool         -> @fork("formatc")="Try to run a terminal on host with xdotool";
      
      windows "Application windows and clipboard" -> windows_buttons;
        windows_buttons:beside -> xwininfo xclip;
          xwininfo        -> @fork("windowlist")="Show a list of accessable application windows with xwininfo";
          xclip           -> @fork("clipboard")="Show content of clipboard with xclip";

    gpu:framed " GPU video memory leak" -> palinopsia glx @fill;
      palinopsia "Palinopsia leak" -> palinopsia_info palinopsia_button;
        palinopsia_info   -> @text=" GPU drivers do not clean video memory when an application allocates it. This affects x11docker option --gpu. \n Former video content can be viewed and even survives a reboot. Compare:  https://hsmr.cc/palinopsia";
        palinopsia_button -> @fork("palinopsia 800 600 256")="View some GPU video memory (palinopsia leak). Scroll with arrow keys.";

      glx "Hardware acceleration checks" -> glx_info glxgears glxspheres glxinfo;
        glx_info          -> @text="Check whether hardware acceleration works. \n glxgears and glxspheres should show a frame rate matching your monitor, mostly about 60 frames/second. \n glxinfo should show your video card name. If the name contains llvmpipe, software rendering is used." ;
        glxgears          -> @fork("xterm -hold -e glxgears")="Run glxgears";
        glxspheres        -> @fork("xterm -hold -e glxspheres64")="Run glxspheres";
        glxinfo           -> @fork("xterm -hold -e 'glxinfo | grep OpenGL'")="Run glxinfo";
        
    features:framed "Sound and webcam" -> sound webcam @fill;
      sound "Sound check" -> sound_info soundalsa soundpulse;
        sound_info        -> @text=" Sound check for options --alsa and --pulsaudio";
        soundalsa         -> @fork("xterm -hold -e soundcheck-alsa")="Sound check ALSA";
        soundpulse        -> @fork("xterm -hold -e soundcheck-pulse")="Sound check Pulseaudio";
      webcam "Webcam check" -> webcam_info webcam_capture;
        webcam_info       -> @text=" Webcam capture with option --webcam";
        webcam_capture    -> @fork("xterm -hold -e 'vgrabbj | feh - '")="Webcam capture";
      
    container:framed "Container capabilities" -> capabilities @fill;
      capabilities "Capabilities" -> capabilities_info capsh; 
        capabilities_info " Capabilities allow access to system resources for root user and suid applications. \n Regular user application should need none of them. \n Docker has a default set of allowed capabilties. x11docker drops them all in default setups." -> "";
        capsh           -> @fork("capcheck")="Check process capabilities";
        
    buttonline:beside -> bash @close="Exit";
      bash              -> @fork("xfce4-terminal")="Run a bash terminal";
